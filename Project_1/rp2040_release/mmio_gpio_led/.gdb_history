c
step
step
mon reset init
j main 
info registers 
mon reset init
info registers 
Quit
quit
target extended-remote :3333
break main 
j main 
step
step
step
step
step
step
step

step
step
step
step
step
step
step
step
step
step
print UART0 
uart-tx
source ~/File_Library/SP2025/Microprocessors_2_SP2025/uart-tx.py 
uart-tx load-img ~/Downloads/cake.png 
uart-tx open
target extended-remote :3333
where
quit
target extended-remote :3333
source ~/File_Library/SP2025/Microprocessors_2_SP2025/uart-tx.py 
uart-tx load-img ~/Downloads/cake.png 
uart-tx open
print UART0 
info breakpoints 
break __vector_36
clear
where
where
breakpoint
break
clear
break __vector_36
step
step
step
step
stepi
stepi
j main
step
step
step
step
j main
where
step
step
break main
mon reset init
where
step
step
step
stepi
stepi
stepi
mon reset init
j main
step
step
step
step
step
step
step
step
step
mon reset init
j main
c
wjere
mon reset init
j main
stepi
exit
target extended-remote :3333
print /x NVIC_ISER 
info registers 
print UART0 
info breakpoints 
break __vector_36
source ~/File_Library/SP2025/Microprocessors_2_SP2025/uart-tx.py 
uart-tx load-img ~/Downloads/cake.png 
uart-tx open 
target extended-remote :3333
break __vector_36
source ~/File_Library/SP2025/Microprocessors_2_SP2025/uart-tx.py 
source ~/File_Library/SP2025/Microprocessors_2_SP2025/uart-tx.py 
uart-tx load-img ~/Downloads/cake.png 
uart-tx open 
where
break main
mon reset init
j main
c
uart-tx send
print UART0 
where
print UART0 
c
where
step
print CLOCKS 
info registers xPSR 
x/1wx 0xe000ed28
x/1wx 0xe000ed2c
print $sp
x/10wx $sp
disassemble $sp + 20
disassemble $sp+20
disassemble $sp
x/10i $sp+20
x/10i *($sp+20)
disassemble *($sp + 20)
x/10i (void*)($sp+20)
x/10i *((void*)($sp+20))
x/10i *((unsigned*)($sp+20))
x/10i *((unsigned*)($sp+20))-4
info registers 
x/20wx $sp
mon reset init
break uart0_init
c
del break 2
c
step
set break __vector_36
break __vector_36
uart-tx send 0ff
stepi
x/10wx __vector_table
x/10wx (void*)__vector_table
x/10wx &__vector_table
x/1wx &__vector_table + 36
x/1wx (unsigned*)&__vector_table + 36
info symbol 0x1000034c
x/40wx &__vector_table
info symbol 0x10000280
python print(hex(36))
python print(hex(36*4))
directory 
file binary.elf 
load
x/1wx (unsigned*)&__vector_table + 36
x/1wx (unsigned*)&__vector_table + 35
x/1wx (unsigned*)&__vector_table + 37
info symbol 0x100027c
info symbol 0x1000027c
info symbol 0x10000348
uart-tx open 
uart-tx send
info breakpoints 
print UART0 
uart-tx send-next 
print UART0 
uart-tx send-next 
print UART0 
uart-tx send-next 
print UART0 
uart-tx send-next 
print UART0 
uart-tx send-next 
print UART0 
where
where
print UART0 
print UART0 
print UART0 
c
c
where
c
where
step
step
stepi
stepi
stepi
stepi
stepi
stepi
stepi
stepi
where
mon reset init
where
c
c
c
c
where
uart-tx send
where
c
wher
where 
print /x UART0.uartdr 
print /x UART0.uartdr 
step
print /x UART0.uartdr 
uart-tx send
print /x UART0.uartdr 
print /x UART0.uartdr 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
uart-tx send-next 
print /x UART0.uartdr 
where
step
step
step
step
step
step
step
c
c
