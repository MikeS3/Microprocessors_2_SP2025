	.syntax unified	/* use unified ARM assembly syntax */
	.thumb			/* use thumb encodings only */
	.cpu cortex-m0plus	/* ensure we limit ourselves to the ARMv6-M ISA on the
						 * Cortex-M0+ core */

	.section .text.__reset	/* use subsection __reset in .text */
	.global __reset			/* make the symbol global */
	.type __reset, %function	/* make it into a function! */
__reset:
	/* load pointers required for .data initialization */
	ldr r0, =__data_start
	ldr r1, =__data_end
	ldr r2, =__data_load_start


L_init_data:
	cmp r0, r1
	beq L_init_bss
	ldr r3, [r2]
	adds r2, #4 // increment r2 by 4 bytes
	str r3, [r0] //store value at r3 into address at r0
	adds r0, #4 // increment r0 by 4 bytes
	b L_init_data
L_init_bss_pointers:
	/* load pointers for .bss initialization */
	ldr r1, = __bss_start
	ldr r2, = __bss_end
	movs r0, #0

L_init_bss:
	/* loop to clear the section */
	cmp r1, r2
	beq L_call_main
	str r0, [r1] // store 0 into sram at address stored at r1
	adds r1, #4 // increment r1 by 4 bytes
	b L_init_bss
L_call_main:
	bl main		/* call main */

	/* gracefully halt execution waiting for event */
1:	wfe
	b 1b		/* branch to first occurrence of label 1 going backwards */

	.size __reset, . - __reset	/* it's always a good idea to have the size
								 * of the symbol around; the . means current
								 * address at link time, let the linker do the
								 * math subtracting the addresses */

	.section .text.__bad_interrupt  /* use subsection __bad_interrupt in .text */
        .global __bad_interrupt         /* make the symbol global */
        .type __bad_interrupt, %function        /* make it into a function! */
__bad_interrupt:
	/* add globally visible symbol for __bad_interrupt and implement the
	 * function to be an idle loop that awaits for events */
	wfe
	b __bad_interrupt

	/* make symbols weak and alias them to __bad_interrupt; declaring another
	 * symbol with the same name will make the ``strong'' symbol be used
	 * instead */
	//.weak __vector_2
	//.set __vector_2, __bad_interrupt
	/* TODO: add all other vectors; hint: use .irp for core vectors and use a
	 * combination of .altmacro, .macro, and .rept for external vectors */


	//macro vector aliasing code generated by ChatGPT
	.section .vectors, "a"

        .altmacro
        .macro WEAK_VECTOR n
                .weak __vector_\n
                .set __vector_\n, __bad_interrupt
        .endm

        .rept 47   // Assuming 47 vectors
                WEAK_VECTOR %0
        .endr

